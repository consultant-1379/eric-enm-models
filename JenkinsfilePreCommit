#!/usr/bin/env groovy

/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2020
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------
 *
 * IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 *  - slave with a specific label (see pipeline.agent.label below)
 *  - credentials plugin should be installed and have the secrets with the following names:
 *    + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.7.0-95'
def bob = ''
def failedStage = ''

pipeline {

    agent {
        label 'Cloud-Native'
    }

    parameters {
        string(name: 'ISO_VERSION', defaultValue: '0.0.0', description: 'The ENM ISO version (e.g. 1.65.77)')
    }

    stages {

        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }

        stage('Init') {
            steps {
                script {
                    def bobCmd = load 'jenkins/BobCommand.groovy'
                    bob = bobCmd
                            .bobImage(defaultBobImage)
                            .envVars(['ISO_VERSION': '${ISO_VERSION}'])
                            .needDockerSocket(true)
                            .toString()
                }
            }
        }

        stage('Clean') {
            steps {
                sh "rm -rf ${WORKSPACE}/.bob/"
                sh "${bob} clean"
            }
        }

        stage('Checkout Cloud-Native Service Git Repository') {
            steps {
                script {
                    if (env.GERRIT_CHANGE_NUMBER) {
                        checkout changelog: true, \
                        scm: [$class: 'GitSCM', \
                        branches: [[name: "$GERRIT_REFSPEC"]], \
                        doGenerateSubmoduleConfigurations: false, \
                        extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[refspec: "${GERRIT_REFSPEC}", \
                        url: "${GERRIT_MIRROR}/${GERRIT_PROJECT}"]]]
                    } else {
                        println "No GERRIT_CHANGE_NUMBER"
                        git changelog: true, poll: false, url: '${GERRIT_MIRROR}/${REPO}'
                    }
                }
            }
        }

        stage('Generate new version') {
            steps {
                sh "${bob} generate-new-version"
            }

            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image-with-all-tags"
                    }
                }
            }
        }

        stage('Linting Scripting') {
            steps {
                sh "${bob} lint-scripting"
                archiveArtifacts 'scriptinglint.log'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Testing Scripting') {
            steps {
                sh "${bob} test-scripting"
                archiveArtifacts artifacts: 'htmlcov/**/*'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Linting Dockerfile') {
            steps {
                sh "${bob} lint-dockerfile"
                archiveArtifacts 'dockerfilelint.log'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage('Build Models Images') {
            steps {
                sh "${bob} build-image-with-all-tags-internal"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image-with-all-tags-internal"
                    }
                }
            }
        }

        stage('Hadolint Scan') {
            steps {
                sh "${bob} hadolint-scan || true"
                archiveArtifacts 'build/hadolint-reports/'
            }
        }

        stage('Trivy Scan') {
          steps {
              sh "${bob} trivy-inline-scan || true"
              archiveArtifacts 'build/trivy-reports/'
          }
       }

       stage('Grype Scan') {
            steps {
                sh "${bob} grype-scan || true"
                archiveArtifacts 'build/grype-reports/'
            }
       }

       stage('Generate VA Report') {
            steps {
                sh "${bob} generate-VA-report-V2 || true"
                archiveArtifacts 'build/models_vulnerability_report.md,build/combined-report/'
            }
       }

        stage('Publish Models Images to Artifactory') {
            steps {
                sh "${bob} push-image-with-all-tags-internal"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image-with-all-tags-internal"
                    }
                }
                always {
                    sh "${bob} remove-image-with-all-tags-internal"
                }
            }
        }

        stage('Generate ADP Parameters') {
            steps {
                sh "${bob} generate-output-parameters-internal"
                archiveArtifacts 'artifact.properties'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
    }
}